@using eShop.BLL.Interfaces
@inject IUserService UserService;

@if (User.Identity is not null && !User.Identity.IsAuthenticated)
{
    <a class="btn btn-outline-success my-2 my-sm-0" asp-controller="User" asp-action="Login">
        <i class="bi bi-box-arrow-in-right"></i> Log in
    </a>
    <span style="padding: 5px;"></span>

    <a class="btn btn-outline-primary my-2 my-sm-0" asp-controller="User" asp-action="Register">
        <i class="bi bi-person-plus"></i> Register
    </a>
}
else
{
    <div class="dropdown">
        <button class="btn btn-outline-success dropdown-toggle" type="button" id="profile-btn" data-toggle="dropdown"
            aria-expanded="false">
            <i class="bi bi-person-badge"></i> Hello @UserService.GetByUsernameAsync(User?.Identity?.Name, default).Result.FirstName <span id="userName"></span>
        </button>
        <ul class="dropdown-menu" aria-labelledby="profile-btn">
            <li>
                <a class="dropdown-item" asp-controller="Order" asp-action="GetAll">
                    <i class="bi bi-list"></i> Orders
                </a>
            </li>

           @if (User.IsInRole("Admin"))
            {
                <li>
                    <a class="dropdown-item" asp-controller="User" asp-action="GetAll">
                        <i class="bi bi-people"></i> Users
                    </a>
                </li>
            }
        </ul>
    </div>
    <span style="padding: 5px;"></span>
    <form asp-controller="Product" asp-action="Index">
        <button class="btn btn-outline-danger my-2 my-sm-0" onclick="logout()">
            <i class="bi bi-box-arrow-in-right"></i> Log out
        </button>
    </form>
}

@*
<script>
    var tokenKey = "accessToken";

    // отпавка запроса к контроллеру AccountController для получения токена
    async function getTokenAsync() {

        // получаем данные формы и фомируем объект для отправки
        const formData = new FormData();
        formData.append("grant_type", "password");
        formData.append("username", document.getElementById("emailLogin").value);
        formData.append("password", document.getElementById("passwordLogin").value);

        // отправляет запрос и получаем ответ
        const response = await fetch("/token", {
            method: "POST",
            headers: { "Accept": "application/json" },
            body: formData
        });
        // получаем данные
        const data = await response.json();

        // если запрос прошел нормально
        if (response.ok === true) {

            // изменяем содержимое и видимость блоков на странице
            document.getElementById("userName").innerText = data.username;
            document.getElementById("userInfo").style.display = "block";
            document.getElementById("loginForm").style.display = "none";
            // сохраняем в хранилище sessionStorage токен доступа
            sessionStorage.setItem(tokenKey, data.access_token);
            console.log(data.access_token);
        }
        else {
            // если произошла ошибка, из errorText получаем текст ошибки
            console.log("Error: ", response.status, data.errorText);
        }
    };
    // отправка запроса к контроллеру ValuesController
    async function getData(url) {
        const token = sessionStorage.getItem(tokenKey);

        const response = await fetch(url, {
            method: "GET",
            headers: {
                "Accept": "application/json",
                "Authorization": "Bearer " + token  // передача токена в заголовке
            }
        });
        if (response.ok === true) {

            const data = await response.json();
            alert(data)
        }
        else
            console.log("Status: ", response.status);
    };

    // получаем токен
    document.getElementById("submitLogin").addEventListener("click", e => {

        e.preventDefault();
        getTokenAsync();
    });

    // условный выход - просто удаляем токен и меняем видимость блоков
    document.getElementById("logOut").addEventListener("click", e => {

        e.preventDefault();
        document.getElementById("userName").innerText = "";
        document.getElementById("userInfo").style.display = "none";
        document.getElementById("loginForm").style.display = "block";
        sessionStorage.removeItem(tokenKey);
    });


    // кнопка получения имя пользователя  - /api/values/getlogin
    document.getElementById("getDataByLogin").addEventListener("click", e => {

        e.preventDefault();
        getData("/api/values/getlogin");
    });

    // кнопка получения роли  - /api/values/getrole
    document.getElementById("getDataByRole").addEventListener("click", e => {

        e.preventDefault();
        getData("/api/values/getrole");
    });
</script>*@